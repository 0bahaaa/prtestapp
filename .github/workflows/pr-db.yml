name: PR Database Workflow (local act)

on:
  pull_request:

jobs:
  setup-pr-db:
    runs-on: ubuntu-latest
    env:
      COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}
      COOLIFY_PROJECT_UUID: ${{ secrets.COOLIFY_PROJECT_UUID }}
      COOLIFY_SERVER_UUID: ${{ secrets.COOLIFY_SERVER_UUID }}
      COOLIFY_APP_UUID: ${{ secrets.COOLIFY_APP_UUID }}
      ORIGINAL_DATABASE_URL_HOST: ${{ secrets.ORIGINAL_DATABASE_URL_HOST }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL client and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq

      - name: Create temporary PR database
        id: create_db
        run: |
          echo "Creating PR database in Coolify..."
          JSON_BODY=$(cat <<EOF
          {
          "server_uuid": "$COOLIFY_SERVER_UUID",
          "project_uuid": "$COOLIFY_PROJECT_UUID",
          "environment_name": "production",
          "name": "pr-db-${GITHUB_RUN_ID}",
          "postgres_user": "postgres",
          "postgres_password": "$DB_PASSWORD",
          "postgres_db": "pr_db_${GITHUB_RUN_ID}",
          "image": "postgres:17-alpine",
          "instant_deploy": true
          }
          EOF
          )
          RESPONSE=$(curl -s -X POST http://$DB_HOST:8000/api/v1/databases/postgresql \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_BODY")
          echo "Raw response: $RESPONSE"

          DB_UUID=$(echo "$RESPONSE" | jq -r '.uuid // empty')
          DB_URL_INTERNAL=$(echo "$RESPONSE" | jq -r '.internal_db_url // empty')

          if [ -z "$DB_UUID" ] || [ -z "$DB_URL_INTERNAL" ]; then
            echo "❌ Failed to create PR database. Check the raw response above."
            exit 1
          fi

          echo "DB_UUID=$DB_UUID" >> $GITHUB_ENV
          echo "DB_URL_INTERNAL=$DB_URL_INTERNAL" >> $GITHUB_ENV
          echo "DB_URL=postgres://postgres:$DB_PASSWORD@${DB_HOST}:5432/pr_db_${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "✅ PR database created: $DB_UUID"

      - name: Show temporary DB info
        run: |
          echo "Temporary DB UUID: $DB_UUID"
          echo "Temporary DB URL: $DB_URL"
          echo "Internal DB URL for seeding: $DB_URL_INTERNAL"

      - name: Seed temporary database from original
        run: |
          echo "Seeding PR database..."

          # Wait for the PR DB to be ready
          until pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" >/dev/null 2>&1; do
            echo "Waiting for PR DB..."
            sleep 2
          done

          # Use PGPASSWORD for original DB
          export PGPASSWORD="$ORIGINAL_DB_PASSWORD"

          # pg_dump from original DB
          pg_dump -h "$ORIGINAL_DB_HOST" -p "$ORIGINAL_DB_PORT" -U "$ORIGINAL_DB_USER" -d "$ORIGINAL_DB_NAME" > /tmp/original_dump.sql

          # Use PGPASSWORD for temporary PR DB
          export PGPASSWORD="$DB_PASSWORD"

          # Restore dump into PR DB
          psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "pr_db_${GITHUB_RUN_ID}" -f /tmp/original_dump.sql

          echo "✅ Database seeded successfully"





      - name: Update app environment to point to PR DB
        run: |
          echo "Updating app environment..."
          JSON_UPDATE=$(cat <<EOF
          {
          "environment_name": "production",
          "environment_uuid": "$DB_UUID",
          "env_vars": {
          "DATABASE_URL": "$DB_URL"
          }
          }
          EOF
          )
          curl -s -X PATCH http://$DB_HOST:8000/api/v1/applications/$COOLIFY_APP_UUID \
            -H "Authorization: Bearer $COOLIFY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_UPDATE"
          echo "✅ App environment updated"

#      - name: Delete temporary PR database
#        if: always()
#        run: |
#          curl -s -X DELETE http://$DB_HOST:8000/api/v1/databases/$DB_UUID \
#            -H "Authorization: Bearer $COOLIFY_API_TOKEN"
#          echo "✅ Temporary PR DB deleted"
